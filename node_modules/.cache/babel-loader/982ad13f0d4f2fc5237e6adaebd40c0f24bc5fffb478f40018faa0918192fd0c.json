{"ast":null,"code":"var _jsxFileName = \"/Users/monika/Downloads/01-starting-project/src/components/Expense/ExpenseItem.js\";\nimport ExpenseDestructure from \"./ExpenseDestructure\";\nimport \"./ExpenseItem.css\";\nimport Card from \"../UI/Card/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseItem(props) {\n  let expense = props.arr;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: expense.map(exp => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(ExpenseDestructure, {\n          title: exp.title,\n          amount: exp.amount,\n          date: exp.date,\n          onchange: exp.onchange,\n          ondelete: exp.ondelete\n        }, exp.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = ExpenseItem;\nexport default ExpenseItem;\n\n//learnings:\n//alternatives to set props\n// you can directly destructure props in the arguments itself, ({date,title,amount})\n// then directly access inside your component with above variable names.\n\n//children is the reserved keyword and all the props has children attribute in-built even though if you don't mention it.\n// props.children constain the contain between the wrapper of the custom component\n//<example- Card-customComponent\n//<card><div><h2><EXPSENSE>.....</card>\nvar _c;\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseDestructure","Card","jsxDEV","_jsxDEV","ExpenseItem","props","expense","arr","children","map","exp","title","amount","date","onchange","ondelete","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/monika/Downloads/01-starting-project/src/components/Expense/ExpenseItem.js"],"sourcesContent":["import ExpenseDestructure from \"./ExpenseDestructure\";\nimport \"./ExpenseItem.css\";\nimport Card from \"../UI/Card/Card\";\n\nfunction ExpenseItem(props) {\n  let expense = props.arr;\n  return (\n    <Card>\n      {\n      expense.map((exp) => {\n        return (\n          <Card>\n            <ExpenseDestructure key={exp.id} title={exp.title} amount=\n            {exp.amount} date={exp.date} onchange={exp.onchange} ondelete={exp.ondelete}/>\n          </Card>\n        );\n      })}\n    </Card>\n  );\n}\n\nexport default ExpenseItem;\n\n//learnings:\n//alternatives to set props\n// you can directly destructure props in the arguments itself, ({date,title,amount})\n// then directly access inside your component with above variable names.\n\n//children is the reserved keyword and all the props has children attribute in-built even though if you don't mention it.\n// props.children constain the contain between the wrapper of the custom component\n//<example- Card-customComponent\n//<card><div><h2><EXPSENSE>.....</card>\n"],"mappings":";AAAA,OAAOA,kBAAkB,MAAM,sBAAsB;AACrD,OAAO,mBAAmB;AAC1B,OAAOC,IAAI,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAIC,OAAO,GAAGD,KAAK,CAACE,GAAG;EACvB,oBACEJ,OAAA,CAACF,IAAI;IAAAO,QAAA,EAEHF,OAAO,CAACG,GAAG,CAAEC,GAAG,IAAK;MACnB,oBACEP,OAAA,CAACF,IAAI;QAAAO,QAAA,eACHL,OAAA,CAACH,kBAAkB;UAAcW,KAAK,EAAED,GAAG,CAACC,KAAM;UAACC,MAAM,EACxDF,GAAG,CAACE,MAAO;UAACC,IAAI,EAAEH,GAAG,CAACG,IAAK;UAACC,QAAQ,EAAEJ,GAAG,CAACI,QAAS;UAACC,QAAQ,EAAEL,GAAG,CAACK;QAAS,GADnDL,GAAG,CAACM,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC8C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1E,CAAC;IAEX,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX;AAACC,EAAA,GAfQjB,WAAW;AAiBpB,eAAeA,WAAW;;AAE1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}